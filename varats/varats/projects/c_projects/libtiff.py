"""Project file for libtiff."""
import typing as tp

import benchbuild as bb
from benchbuild.utils.cmd import make
from benchbuild.utils.revision_ranges import (
    block_revisions,
    GoodBadSubgraph,
    RevisionRange,
    SingleRevision,
)
from benchbuild.utils.settings import get_number_of_jobs
from plumbum import local

from varats.containers.containers import get_base_image, ImageBase
from varats.paper_mgmt.paper_config import project_filter_generator
from varats.project.project_util import (
    ProjectBinaryWrapper,
    wrap_paths_to_binaries,
    BinaryType,
    verify_binaries,
)
from varats.provider.cve.cve_provider import CVEProviderHook
from varats.utils.settings import bb_cfg


class Libtiff(bb.Project, CVEProviderHook):  # type: ignore
    """Libtiff is a library for reading and writing Tagged Image File Format
    files."""

    NAME = 'libtiff'
    GROUP = 'c_projects'
    DOMAIN = 'Image File Format'

    SOURCE = [
        block_revisions([
            GoodBadSubgraph(["0ef31e1f62aa7a8b1c488a59c4930775ee0046e4"], [
                "a63512c436c64ad94b8eff09d6d7faa7e638d45d"
            ], "Requires older version of libtool could maybe be done with containers"
                           ),
            GoodBadSubgraph(["de8132768f4345f4fc465a1cf6195faa032b1bf5"], [
                "901535247413d30d9380ee837ecdb9fb661350c6",
                "5ef6de4c7055a3b426d97d5af1a77484ee92eb30"
            ], "Does not build"),
            GoodBadSubgraph(["6d46b8e4642f372192e94976576b13dcb89970d8"], [
                "88df59e89cfb096085bc5299f087eaceda73f12e"
            ], "Does not build because of libtool version discrepancy"),
            GoodBadSubgraph(["f182ef17da5322794bad69644aa5dbf58d254ba4"],
                            ["608412f5c7e92f0f81a63ccf530d192c2316f6bf"],
                            "Bug in Libtiff"),
            SingleRevision(
                "614095e3d06f6ac95fc9bb2e9333cf95c228be1c", "Bug in Libtiff"
            ),
            SingleRevision(
                "a1caf14ce4640eec759a801ea601bd022bdc02d3", "Bug in Libtiff"
            )
        ])(
            bb.source.Git(
                remote="https://gitlab.com/libtiff/libtiff.git",
                local="libtiff",
                refspec="HEAD",
                limit=None,
                shallow=False,
                version_filter=project_filter_generator("libtiff")
            )
        )
    ]

    CONTAINER = get_base_image(ImageBase.DEBIAN_10).run(
        'apt', 'install', '-y', 'autoconf', 'autopoint', 'automake',
        'autotools-dev', 'libtool', 'pkg-config'
    )

    @property
    def binaries(self) -> tp.List[ProjectBinaryWrapper]:
        """Return a list of binaries generated by the project."""
        return wrap_paths_to_binaries([
            ("libtiff/.libs/libtiff.so", BinaryType.shared_library)
        ])

    def run_tests(self) -> None:
        pass

    def compile(self) -> None:
        """Compile the project."""
        libtiff_version_source = local.path(self.source_of(self.primary_source))

        c_compiler = bb.compiler.cc(self)
        with local.cwd(libtiff_version_source):
            with local.env(CC=str(c_compiler)):
                bb.watch(local["./autogen.sh"])()
                configure = bb.watch(local["./configure"])
                configure()
            bb.watch(make)("-j", get_number_of_jobs(bb_cfg()))

            verify_binaries(self)

    @classmethod
    def get_cve_product_info(cls) -> tp.List[tp.Tuple[str, str]]:
        return [("Libtiff", "Libtiff")]
